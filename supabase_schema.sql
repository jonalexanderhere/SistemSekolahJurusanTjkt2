-- Core tables
create table if not exists attendance (
  id bigint generated by default as identity primary key,
  student_id text not null,
  nisn text,
  nama text,
  kelas text,
  type text check (type in ('masuk','pulang')) default 'masuk',
  method text check (method in ('face','manual')) default 'face',
  timestamp_iso text,
  date_id text,
  time_id text,
  status text default 'hadir',
  inserted_at timestamp with time zone default now()
);

create table if not exists face_descriptors (
  student_id text primary key,
  nisn text,
  nama text,
  descriptors jsonb not null,
  registered_at timestamp with time zone default now()
);

create table if not exists profiles (
  user_id text primary key,
  role text check (role in ('admin','guru','siswa')),
  nama text,
  email text,
  nip text,
  kelas text,
  phone text,
  address text,
  avatar_url text,
  updated_at timestamp with time zone default now()
);

create table if not exists grades (
  id bigint generated by default as identity primary key,
  student_id text not null,
  nisn text,
  nama_siswa text,
  kelas text,
  mata_pelajaran text,
  kategori text not null, -- Main category: UH, UTS, UAS, Tugas, Praktik, Custom
  sub_kategori text, -- Detail for custom categories (e.g., "Praktik Jaringan", "Praktik Troubleshooting")
  nilai numeric check (nilai >= 0 and nilai <= 100),
  keterangan text,
  teacher_id text,
  teacher_name text,
  tanggal timestamp with time zone default now(),
  semester text default '1',
  tahun_ajaran text default '2024/2025'
);

create table if not exists exams (
  id bigint generated by default as identity primary key,
  exam_id text unique,
  title text,
  mata_pelajaran text,
  kelas text,
  deskripsi text,
  waktu_mulai timestamptz,
  waktu_selesai timestamptz,
  durasi integer,
  questions jsonb,
  teacher_id text,
  teacher_name text,
  status text default 'active',
  created_at timestamptz default now()
);

create table if not exists exam_submissions (
  id bigint generated by default as identity primary key,
  exam_id text,
  student_id text,
  student_name text,
  answers jsonb,
  correct_answers integer,
  total_questions integer,
  score numeric,
  submitted_at timestamptz default now()
);

create table if not exists school_settings (
  id bigint generated by default as identity primary key,
  setting_key text unique not null,
  setting_value jsonb not null,
  description text,
  updated_by text,
  updated_at timestamp with time zone default now()
);

create table if not exists password_reset_requests (
  id bigint generated by default as identity primary key,
  user_id text not null,
  user_role text check (user_role in ('admin','guru','siswa')),
  user_name text,
  old_password_hint text,
  reason text,
  status text check (status in ('pending','approved','rejected')) default 'pending',
  requested_at timestamp with time zone default now(),
  reviewed_by text,
  reviewed_at timestamp with time zone,
  admin_notes text
);

-- Insert default school schedule
insert into school_settings (setting_key, setting_value, description) values
('school_schedule', '{
  "name": "SMK Negeri 1 Liwa - TJKT XII-2",
  "timezone": "Asia/Jakarta",
  "attendance_hours": {
    "masuk": {
      "start": "06:30",
      "end": "07:30",
      "label": "Jam Masuk"
    },
    "pulang": {
      "start": "14:30",
      "end": "15:30",
      "label": "Jam Pulang"
    }
  },
  "school_days": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  "holidays": []
}'::jsonb, 'Jadwal sekolah dan jam absensi')
on conflict (setting_key) do nothing;

insert into school_settings (setting_key, setting_value, description) values
('class_schedule', '{
  "XII TJKT 2": {
    "Monday": [
      {"time": "10:45-12:00", "subject": "MPKK", "teacher": "ADE FIRMANSYAH, S.Kom"},
      {"time": "13:00-14:30", "subject": "MPKK", "teacher": "ADE FIRMANSYAH, S.Kom"},
      {"time": "14:30-15:45", "subject": "MPKK", "teacher": "ADE FIRMANSYAH, S.Kom"}
    ],
    "Tuesday": [],
    "Wednesday": [
      {"time": "10:45-12:00", "subject": "MPKK", "teacher": "DIDIK KURNIAWAN, S.Kom, M.TI"},
      {"time": "13:00-14:30", "subject": "MPKK", "teacher": "DIDIK KURNIAWAN, S.Kom, M.TI"},
      {"time": "14:30-15:45", "subject": "MPKK", "teacher": "DIDIK KURNIAWAN, S.Kom, M.TI"}
    ],
    "Thursday": [
      {"time": "07:30-09:00", "subject": "MPKK", "teacher": "DIDIK KURNIAWAN, S.Kom, M.TI"},
      {"time": "09:00-10:30", "subject": "MPKK", "teacher": "DIDIK KURNIAWAN, S.Kom, M.TI"},
      {"time": "10:30-12:15", "subject": "MPKK", "teacher": "DIDIK KURNIAWAN, S.Kom, M.TI"}
    ],
    "Friday": [
      {"time": "09:00-10:30", "subject": "MPKK", "teacher": "ADE FIRMANSYAH, S.Kom"},
      {"time": "10:30-12:15", "subject": "MPKK", "teacher": "ADE FIRMANSYAH, S.Kom"}
    ],
    "Saturday": []
  }
}'::jsonb, 'Jadwal pelajaran per kelas')
on conflict (setting_key) do nothing;

-- Indexes for performance
create index if not exists idx_attendance_student on attendance(student_id);
create index if not exists idx_attendance_date on attendance(date_id);
create index if not exists idx_attendance_timestamp on attendance(inserted_at);
create index if not exists idx_grades_student on grades(student_id);
create index if not exists idx_grades_teacher on grades(teacher_id);
create index if not exists idx_exams_teacher on exams(teacher_id);
create index if not exists idx_exams_kelas on exams(kelas);
create index if not exists idx_submissions_exam on exam_submissions(exam_id);
create index if not exists idx_submissions_student on exam_submissions(student_id);
create index if not exists idx_reset_requests_user on password_reset_requests(user_id);
create index if not exists idx_reset_requests_status on password_reset_requests(status);

-- Row Level Security (RLS) Policies
alter table attendance enable row level security;
alter table face_descriptors enable row level security;
alter table profiles enable row level security;
alter table grades enable row level security;
alter table exams enable row level security;
alter table exam_submissions enable row level security;
alter table school_settings enable row level security;
alter table password_reset_requests enable row level security;

-- Attendance policies
create policy "Allow all read access to attendance" on attendance for select using (true);
create policy "Allow insert attendance" on attendance for insert with check (true);

-- Face descriptors policies
create policy "Allow all read face descriptors" on face_descriptors for select using (true);
create policy "Allow insert face descriptors" on face_descriptors for insert with check (true);
create policy "Allow update face descriptors" on face_descriptors for update using (true);

-- Profiles policies
create policy "Allow all read profiles" on profiles for select using (true);
create policy "Allow insert profiles" on profiles for insert with check (true);
create policy "Allow update profiles" on profiles for update using (true);

-- Grades policies
create policy "Allow all read grades" on grades for select using (true);
create policy "Allow insert grades" on grades for insert with check (true);
create policy "Allow update grades" on grades for update using (true);
create policy "Allow delete grades" on grades for delete using (true);

-- Exams policies
create policy "Allow all read exams" on exams for select using (true);
create policy "Allow insert exams" on exams for insert with check (true);
create policy "Allow update exams" on exams for update using (true);
create policy "Allow delete exams" on exams for delete using (true);

-- Exam submissions policies
create policy "Allow all read submissions" on exam_submissions for select using (true);
create policy "Allow insert submissions" on exam_submissions for insert with check (true);

-- School settings policies (only admin can update)
create policy "Allow all read settings" on school_settings for select using (true);
create policy "Allow admin update settings" on school_settings for update using (true);
create policy "Allow admin insert settings" on school_settings for insert with check (true);

-- Password reset requests policies
create policy "Allow all read reset requests" on password_reset_requests for select using (true);
create policy "Allow insert reset requests" on password_reset_requests for insert with check (true);
create policy "Allow admin update reset requests" on password_reset_requests for update using (true);

-- Realtime
alter publication supabase_realtime add table attendance;
alter publication supabase_realtime add table school_settings;

-- Functions for helper
create or replace function check_attendance_time()
returns table(can_checkin boolean, current_period text, message text) as $$
declare
  schedule jsonb;
  current_time time;
  current_day text;
  masuk_start time;
  masuk_end time;
  pulang_start time;
  pulang_end time;
begin
  -- Get school schedule
  select setting_value into schedule 
  from school_settings 
  where setting_key = 'school_schedule';
  
  current_time := now()::time;
  current_day := to_char(now(), 'Day');
  
  -- Parse times
  masuk_start := (schedule->'attendance_hours'->'masuk'->>'start')::time;
  masuk_end := (schedule->'attendance_hours'->'masuk'->>'end')::time;
  pulang_start := (schedule->'attendance_hours'->'pulang'->>'start')::time;
  pulang_end := (schedule->'attendance_hours'->'pulang'->>'end')::time;
  
  -- Check if current time is within attendance hours
  if current_time between masuk_start and masuk_end then
    return query select true, 'masuk'::text, 'Waktu absensi masuk'::text;
  elsif current_time between pulang_start and pulang_end then
    return query select true, 'pulang'::text, 'Waktu absensi pulang'::text;
  else
    return query select false, 'none'::text, 'Diluar jam absensi'::text;
  end if;
end;
$$ language plpgsql;


