-- ============================================
-- COMPLETE DATABASE SCHEMA
-- Sistem Informasi Sekolah SMK Negeri 1 Liwa
-- TJKT XII-2 - MPKK
-- ============================================
-- 
-- FEATURES:
-- ✅ User Management (Admin, Guru, Siswa)
-- ✅ Face Recognition Attendance
-- ✅ Custom Grade Categories
-- ✅ Online Exams (MCQ & Essay)
-- ✅ Real-time Updates (Supabase Realtime)
-- ✅ School Settings Management
-- ✅ Password Reset System
-- ✅ Telegram Notifications
-- ✅ Row Level Security (RLS)
--
-- ============================================

-- ============================================
-- 1. USERS TABLE
-- ============================================

create table if not exists users (
  id text primary key,
  username text unique not null,
  password text not null, -- bcrypt hashed
  nama text not null,
  role text check (role in ('admin','guru','siswa')) not null,
  email text,
  nisn text,
  nip text,
  kelas text,
  mata_pelajaran jsonb,
  hadir boolean default false,
  face_registered boolean default false,
  created_at timestamp with time zone default now(),
  last_login timestamp with time zone,
  is_active boolean default true
);

-- Indexes for users
create index if not exists idx_users_username on users(username);
create index if not exists idx_users_role on users(role);
create index if not exists idx_users_nisn on users(nisn);
create index if not exists idx_users_nip on users(nip);

-- ============================================
-- 2. ATTENDANCE TABLE
-- ============================================

create table if not exists attendance (
  id bigint generated by default as identity primary key,
  student_id text not null,
  nisn text,
  nama text,
  kelas text,
  type text check (type in ('masuk','pulang')) default 'masuk',
  method text check (method in ('face','manual','qr')) default 'face',
  timestamp_iso text,
  date_id text, -- Format: YYYY-MM-DD
  time_id text, -- Format: HH:MM:SS
  status text default 'hadir',
  teacher_verified boolean default false,
  teacher_id text,
  notes text,
  inserted_at timestamp with time zone default now()
);

-- Indexes for attendance
create index if not exists idx_attendance_student on attendance(student_id);
create index if not exists idx_attendance_date on attendance(date_id);
create index if not exists idx_attendance_timestamp on attendance(inserted_at);
create index if not exists idx_attendance_type on attendance(type);
create index if not exists idx_attendance_status on attendance(status);

-- ============================================
-- 3. FACE DESCRIPTORS TABLE
-- ============================================

create table if not exists face_descriptors (
  student_id text primary key,
  nisn text,
  nama text,
  descriptors jsonb not null, -- Array of face descriptor arrays
  registered_at timestamp with time zone default now(),
  last_updated timestamp with time zone default now(),
  version integer default 1,
  is_active boolean default true
);

-- Index for face descriptors
create index if not exists idx_face_descriptors_nisn on face_descriptors(nisn);

-- ============================================
-- 4. PROFILES TABLE
-- ============================================

create table if not exists profiles (
  user_id text primary key,
  role text check (role in ('admin','guru','siswa')),
  nama text,
  email text,
  nip text,
  nisn text,
  kelas text,
  phone text,
  address text,
  avatar_url text,
  bio text,
  date_of_birth date,
  gender text check (gender in ('L','P')),
  updated_at timestamp with time zone default now()
);

-- Index for profiles
create index if not exists idx_profiles_role on profiles(role);
create index if not exists idx_profiles_kelas on profiles(kelas);

-- ============================================
-- 5. GRADES TABLE (CUSTOM CATEGORIES)
-- ============================================

create table if not exists grades (
  id bigint generated by default as identity primary key,
  student_id text not null,
  nisn text,
  nama_siswa text,
  kelas text,
  mata_pelajaran text,
  
  -- FLEXIBLE CATEGORY SYSTEM
  kategori text not null, -- Main: UH, UTS, UAS, Tugas, Praktik, Proyek, Custom
  sub_kategori text, -- Detail: "Praktik Jaringan", "Tugas Troubleshooting", dll
  deskripsi_nilai text, -- Additional description
  
  nilai numeric check (nilai >= 0 and nilai <= 100),
  bobot numeric default 1.0, -- Weight for calculation
  keterangan text,
  
  teacher_id text,
  teacher_name text,
  tanggal timestamp with time zone default now(),
  
  semester text default '1',
  tahun_ajaran text default '2024/2025',
  
  -- Metadata
  is_published boolean default true,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);

-- Indexes for grades
create index if not exists idx_grades_student on grades(student_id);
create index if not exists idx_grades_teacher on grades(teacher_id);
create index if not exists idx_grades_kategori on grades(kategori);
create index if not exists idx_grades_semester on grades(semester);
create index if not exists idx_grades_tahun_ajaran on grades(tahun_ajaran);

-- ============================================
-- 6. EXAMS TABLE (MCQ & ESSAY)
-- ============================================

create table if not exists exams (
  id bigint generated by default as identity primary key,
  exam_id text unique not null,
  title text not null,
  mata_pelajaran text,
  kelas text,
  deskripsi text,
  
  -- Timing
  waktu_mulai timestamptz,
  waktu_selesai timestamptz,
  durasi integer, -- in minutes
  
  -- Questions (JSON array)
  questions jsonb not null,
  -- Format: [{ type: "mcq|essay", question: "", options: [], correct: "", points: 10 }]
  
  -- Metadata
  teacher_id text,
  teacher_name text,
  status text default 'active' check (status in ('draft','active','closed','archived')),
  
  -- Settings
  allow_review boolean default true,
  shuffle_questions boolean default false,
  show_results_immediately boolean default false,
  passing_score numeric default 70,
  
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- Indexes for exams
create index if not exists idx_exams_exam_id on exams(exam_id);
create index if not exists idx_exams_teacher on exams(teacher_id);
create index if not exists idx_exams_kelas on exams(kelas);
create index if not exists idx_exams_status on exams(status);

-- ============================================
-- 7. EXAM SUBMISSIONS TABLE
-- ============================================

create table if not exists exam_submissions (
  id bigint generated by default as identity primary key,
  exam_id text not null,
  student_id text not null,
  student_name text,
  
  -- Answers (JSON object)
  answers jsonb not null,
  -- Format: { "q1": "answer", "q2": "essay answer", ... }
  
  -- Grading
  mcq_correct integer default 0,
  essay_scores jsonb, -- Manual grading for essays
  total_questions integer,
  score numeric,
  grade text, -- A, B, C, D, E
  
  -- Timing
  started_at timestamptz,
  submitted_at timestamptz default now(),
  time_taken integer, -- in seconds
  
  -- Status
  is_graded boolean default false,
  graded_by text,
  graded_at timestamptz,
  feedback text,
  
  -- Metadata
  ip_address text,
  user_agent text
);

-- Indexes for exam submissions
create index if not exists idx_submissions_exam on exam_submissions(exam_id);
create index if not exists idx_submissions_student on exam_submissions(student_id);
create index if not exists idx_submissions_graded on exam_submissions(is_graded);
create unique index if not exists idx_submissions_unique on exam_submissions(exam_id, student_id);

-- ============================================
-- 8. SCHOOL SETTINGS TABLE
-- ============================================

create table if not exists school_settings (
  id bigint generated by default as identity primary key,
  setting_key text unique not null,
  setting_value jsonb not null,
  description text,
  category text, -- attendance, schedule, notification, system
  is_public boolean default false,
  updated_by text,
  updated_at timestamp with time zone default now()
);

-- Index for school settings
create index if not exists idx_settings_key on school_settings(setting_key);
create index if not exists idx_settings_category on school_settings(category);

-- ============================================
-- 9. PASSWORD RESET REQUESTS TABLE
-- ============================================

create table if not exists password_reset_requests (
  id bigint generated by default as identity primary key,
  user_id text not null,
  user_role text check (user_role in ('admin','guru','siswa')),
  user_name text,
  old_password_hint text,
  reason text,
  
  -- Status
  status text check (status in ('pending','approved','rejected')) default 'pending',
  
  -- Timestamps
  requested_at timestamp with time zone default now(),
  reviewed_by text,
  reviewed_at timestamp with time zone,
  
  -- Admin notes
  admin_notes text,
  
  -- New password (temporary, encrypted)
  temp_password text,
  temp_password_expires_at timestamptz
);

-- Indexes for password reset
create index if not exists idx_reset_requests_user on password_reset_requests(user_id);
create index if not exists idx_reset_requests_status on password_reset_requests(status);
create index if not exists idx_reset_requests_date on password_reset_requests(requested_at);

-- ============================================
-- 10. NOTIFICATIONS TABLE (TELEGRAM & IN-APP)
-- ============================================

create table if not exists notifications (
  id bigint generated by default as identity primary key,
  
  -- Recipient
  user_id text,
  role text, -- Filter by role: all, admin, guru, siswa
  
  -- Content
  title text not null,
  message text not null,
  type text check (type in ('info','success','warning','error','attendance','grade','exam')) default 'info',
  
  -- Channels
  sent_telegram boolean default false,
  sent_email boolean default false,
  sent_in_app boolean default true,
  
  -- Status
  is_read boolean default false,
  read_at timestamptz,
  
  -- Metadata
  link text,
  icon text,
  priority text check (priority in ('low','medium','high')) default 'medium',
  
  created_at timestamptz default now(),
  expires_at timestamptz
);

-- Indexes for notifications
create index if not exists idx_notifications_user on notifications(user_id);
create index if not exists idx_notifications_role on notifications(role);
create index if not exists idx_notifications_read on notifications(is_read);
create index if not exists idx_notifications_created on notifications(created_at);

-- ============================================
-- 11. ACTIVITY LOGS TABLE
-- ============================================

create table if not exists activity_logs (
  id bigint generated by default as identity primary key,
  user_id text,
  user_role text,
  user_name text,
  
  -- Action
  action text not null, -- login, logout, create_grade, delete_exam, etc.
  category text, -- auth, attendance, grade, exam, system
  description text,
  
  -- Details
  target_id text, -- ID of affected resource
  target_type text, -- user, grade, exam, etc.
  changes jsonb, -- Before/after values
  
  -- Metadata
  ip_address text,
  user_agent text,
  timestamp timestamptz default now()
);

-- Indexes for activity logs
create index if not exists idx_logs_user on activity_logs(user_id);
create index if not exists idx_logs_action on activity_logs(action);
create index if not exists idx_logs_timestamp on activity_logs(timestamp);

-- ============================================
-- INSERT DEFAULT SETTINGS
-- ============================================

-- School Schedule Settings
insert into school_settings (setting_key, setting_value, description, category) values
('school_schedule', '{
  "name": "SMK Negeri 1 Liwa - TJKT XII-2",
  "timezone": "Asia/Jakarta",
  "attendance_hours": {
    "masuk": {
      "start": "06:30",
      "end": "07:30",
      "label": "Jam Masuk"
    },
    "pulang": {
      "start": "14:30",
      "end": "15:30",
      "label": "Jam Pulang"
    }
  },
  "school_days": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  "holidays": []
}'::jsonb, 'Jadwal sekolah dan jam absensi', 'attendance')
on conflict (setting_key) do nothing;

-- Class Schedule for MPKK
insert into school_settings (setting_key, setting_value, description, category) values
('class_schedule', '{
  "XII TJKT 2": {
    "Monday": [
      {"time": "10:45-12:00", "subject": "MPKK", "teacher": "ADE FIRMANSYAH, S.Kom", "teacher_id": "guru002"},
      {"time": "13:00-14:30", "subject": "MPKK", "teacher": "ADE FIRMANSYAH, S.Kom", "teacher_id": "guru002"},
      {"time": "14:30-15:45", "subject": "MPKK", "teacher": "ADE FIRMANSYAH, S.Kom", "teacher_id": "guru002"}
    ],
    "Tuesday": [],
    "Wednesday": [
      {"time": "10:45-12:00", "subject": "MPKK", "teacher": "DIDIK KURNIAWAN, S.Kom, M.TI", "teacher_id": "guru001"},
      {"time": "13:00-14:30", "subject": "MPKK", "teacher": "DIDIK KURNIAWAN, S.Kom, M.TI", "teacher_id": "guru001"},
      {"time": "14:30-15:45", "subject": "MPKK", "teacher": "DIDIK KURNIAWAN, S.Kom, M.TI", "teacher_id": "guru001"}
    ],
    "Thursday": [
      {"time": "07:30-09:00", "subject": "MPKK", "teacher": "DIDIK KURNIAWAN, S.Kom, M.TI", "teacher_id": "guru001"},
      {"time": "09:00-10:30", "subject": "MPKK", "teacher": "DIDIK KURNIAWAN, S.Kom, M.TI", "teacher_id": "guru001"},
      {"time": "10:30-12:15", "subject": "MPKK", "teacher": "DIDIK KURNIAWAN, S.Kom, M.TI", "teacher_id": "guru001"}
    ],
    "Friday": [
      {"time": "09:00-10:30", "subject": "MPKK", "teacher": "ADE FIRMANSYAH, S.Kom", "teacher_id": "guru002"},
      {"time": "10:30-12:15", "subject": "MPKK", "teacher": "ADE FIRMANSYAH, S.Kom", "teacher_id": "guru002"}
    ],
    "Saturday": []
  }
}'::jsonb, 'Jadwal pelajaran per kelas', 'schedule')
on conflict (setting_key) do nothing;

-- Telegram Settings
insert into school_settings (setting_key, setting_value, description, category) values
('telegram_config', '{
  "enabled": true,
  "bot_token": "",
  "chat_id": "",
  "notifications": {
    "attendance": true,
    "grades": true,
    "exams": true,
    "system": false
  }
}'::jsonb, 'Konfigurasi Telegram Bot', 'notification')
on conflict (setting_key) do nothing;

-- Grade Categories (Customizable)
insert into school_settings (setting_key, setting_value, description, category) values
('grade_categories', '{
  "categories": [
    {
      "id": "uh",
      "label": "Ulangan Harian",
      "code": "UH",
      "allow_sub_category": true,
      "default_weight": 1.0
    },
    {
      "id": "uts",
      "label": "Ujian Tengah Semester",
      "code": "UTS",
      "allow_sub_category": false,
      "default_weight": 2.0
    },
    {
      "id": "uas",
      "label": "Ujian Akhir Semester",
      "code": "UAS",
      "allow_sub_category": false,
      "default_weight": 3.0
    },
    {
      "id": "tugas",
      "label": "Tugas",
      "code": "Tugas",
      "allow_sub_category": true,
      "default_weight": 1.0
    },
    {
      "id": "praktik",
      "label": "Praktik",
      "code": "Praktik",
      "allow_sub_category": true,
      "default_weight": 2.0,
      "sub_categories": [
        "Praktik Jaringan",
        "Praktik Troubleshooting",
        "Praktik Maintenance",
        "Praktik Perakitan PC",
        "Praktik Konfigurasi Server"
      ]
    },
    {
      "id": "proyek",
      "label": "Proyek",
      "code": "Proyek",
      "allow_sub_category": true,
      "default_weight": 2.5
    }
  ]
}'::jsonb, 'Kategori nilai yang dapat dikustomisasi', 'system')
on conflict (setting_key) do nothing;

-- ============================================
-- ROW LEVEL SECURITY (RLS) POLICIES
-- ============================================

-- Enable RLS on all tables
alter table users enable row level security;
alter table attendance enable row level security;
alter table face_descriptors enable row level security;
alter table profiles enable row level security;
alter table grades enable row level security;
alter table exams enable row level security;
alter table exam_submissions enable row level security;
alter table school_settings enable row level security;
alter table password_reset_requests enable row level security;
alter table notifications enable row level security;
alter table activity_logs enable row level security;

-- Users policies
create policy "Allow service role full access to users" on users for all using (true);
create policy "Allow read users" on users for select using (true);

-- Attendance policies
create policy "Allow all read attendance" on attendance for select using (true);
create policy "Allow insert attendance" on attendance for insert with check (true);
create policy "Allow update attendance" on attendance for update using (true);

-- Face descriptors policies
create policy "Allow all read face descriptors" on face_descriptors for select using (true);
create policy "Allow insert face descriptors" on face_descriptors for insert with check (true);
create policy "Allow update face descriptors" on face_descriptors for update using (true);

-- Profiles policies
create policy "Allow all read profiles" on profiles for select using (true);
create policy "Allow insert profiles" on profiles for insert with check (true);
create policy "Allow update profiles" on profiles for update using (true);

-- Grades policies
create policy "Allow all read grades" on grades for select using (true);
create policy "Allow insert grades" on grades for insert with check (true);
create policy "Allow update grades" on grades for update using (true);
create policy "Allow delete grades" on grades for delete using (true);

-- Exams policies
create policy "Allow all read exams" on exams for select using (true);
create policy "Allow insert exams" on exams for insert with check (true);
create policy "Allow update exams" on exams for update using (true);
create policy "Allow delete exams" on exams for delete using (true);

-- Exam submissions policies
create policy "Allow all read submissions" on exam_submissions for select using (true);
create policy "Allow insert submissions" on exam_submissions for insert with check (true);
create policy "Allow update submissions" on exam_submissions for update using (true);

-- School settings policies
create policy "Allow all read settings" on school_settings for select using (true);
create policy "Allow admin update settings" on school_settings for update using (true);
create policy "Allow admin insert settings" on school_settings for insert with check (true);

-- Password reset requests policies
create policy "Allow all read reset requests" on password_reset_requests for select using (true);
create policy "Allow insert reset requests" on password_reset_requests for insert with check (true);
create policy "Allow admin update reset requests" on password_reset_requests for update using (true);

-- Notifications policies
create policy "Allow all read notifications" on notifications for select using (true);
create policy "Allow insert notifications" on notifications for insert with check (true);
create policy "Allow update notifications" on notifications for update using (true);
create policy "Allow delete notifications" on notifications for delete using (true);

-- Activity logs policies
create policy "Allow all read activity logs" on activity_logs for select using (true);
create policy "Allow insert activity logs" on activity_logs for insert with check (true);

-- ============================================
-- REALTIME SUBSCRIPTIONS
-- ============================================

-- Enable realtime for critical tables
alter publication supabase_realtime add table attendance;
alter publication supabase_realtime add table notifications;
alter publication supabase_realtime add table school_settings;
alter publication supabase_realtime add table grades;
alter publication supabase_realtime add table exam_submissions;

-- ============================================
-- HELPER FUNCTIONS
-- ============================================

-- Function: Check attendance time
create or replace function check_attendance_time()
returns table(can_checkin boolean, current_period text, message text) as $$
declare
  schedule jsonb;
  current_time time;
  current_day text;
  masuk_start time;
  masuk_end time;
  pulang_start time;
  pulang_end time;
begin
  -- Get school schedule
  select setting_value into schedule
  from school_settings
  where setting_key = 'school_schedule';

  current_time := now()::time;
  current_day := to_char(now(), 'Day');

  -- Parse times
  masuk_start := (schedule->'attendance_hours'->'masuk'->>'start')::time;
  masuk_end := (schedule->'attendance_hours'->'masuk'->>'end')::time;
  pulang_start := (schedule->'attendance_hours'->'pulang'->>'start')::time;
  pulang_end := (schedule->'attendance_hours'->'pulang'->>'end')::time;

  -- Check if current time is within attendance hours
  if current_time between masuk_start and masuk_end then
    return query select true, 'masuk'::text, 'Waktu absensi masuk'::text;
  elsif current_time between pulang_start and pulang_end then
    return query select true, 'pulang'::text, 'Waktu absensi pulang'::text;
  else
    return query select false, 'none'::text, 'Diluar jam absensi'::text;
  end if;
end;
$$ language plpgsql;

-- Function: Calculate student average grade
create or replace function calculate_student_average(p_student_id text, p_semester text)
returns numeric as $$
declare
  weighted_sum numeric;
  total_weight numeric;
begin
  select 
    coalesce(sum(nilai * bobot), 0),
    coalesce(sum(bobot), 1)
  into weighted_sum, total_weight
  from grades
  where student_id = p_student_id
    and semester = p_semester
    and is_published = true;
    
  return round(weighted_sum / total_weight, 2);
end;
$$ language plpgsql;

-- Function: Get attendance statistics
create or replace function get_attendance_stats(p_student_id text, p_month text)
returns table(
  total_days integer,
  hadir integer,
  sakit integer,
  izin integer,
  alpha integer,
  percentage numeric
) as $$
begin
  return query
  select 
    count(*)::integer as total_days,
    count(*) filter (where status = 'hadir')::integer as hadir,
    count(*) filter (where status = 'sakit')::integer as sakit,
    count(*) filter (where status = 'izin')::integer as izin,
    count(*) filter (where status = 'alpha')::integer as alpha,
    round(
      (count(*) filter (where status = 'hadir')::numeric / nullif(count(*), 0)) * 100,
      2
    ) as percentage
  from attendance
  where student_id = p_student_id
    and date_id like p_month || '%';
end;
$$ language plpgsql;

-- Function: Send notification (trigger Telegram via webhook)
create or replace function send_notification(
  p_user_id text,
  p_title text,
  p_message text,
  p_type text default 'info'
)
returns bigint as $$
declare
  notification_id bigint;
begin
  insert into notifications (user_id, title, message, type)
  values (p_user_id, p_title, p_message, p_type)
  returning id into notification_id;
  
  return notification_id;
end;
$$ language plpgsql;

-- ============================================
-- TRIGGERS
-- ============================================

-- Trigger: Update timestamp on profile update
create or replace function update_timestamp()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

create trigger update_profiles_timestamp
before update on profiles
for each row
execute function update_timestamp();

create trigger update_grades_timestamp
before update on grades
for each row
execute function update_timestamp();

create trigger update_exams_timestamp
before update on exams
for each row
execute function update_timestamp();

-- ============================================
-- VIEWS FOR REPORTING
-- ============================================

-- View: Student attendance summary
create or replace view vw_student_attendance_summary as
select 
  a.student_id,
  a.nama,
  a.kelas,
  count(*) as total_attendance,
  count(*) filter (where a.status = 'hadir') as total_hadir,
  count(*) filter (where a.type = 'masuk') as total_masuk,
  count(*) filter (where a.type = 'pulang') as total_pulang,
  round(
    (count(*) filter (where a.status = 'hadir')::numeric / nullif(count(*), 0)) * 100,
    2
  ) as attendance_percentage,
  max(a.inserted_at) as last_attendance
from attendance a
group by a.student_id, a.nama, a.kelas;

-- View: Student grade summary
create or replace view vw_student_grade_summary as
select 
  g.student_id,
  g.nama_siswa,
  g.kelas,
  g.semester,
  g.tahun_ajaran,
  count(*) as total_grades,
  round(avg(g.nilai), 2) as average_grade,
  min(g.nilai) as min_grade,
  max(g.nilai) as max_grade,
  count(distinct g.kategori) as total_categories
from grades g
where g.is_published = true
group by g.student_id, g.nama_siswa, g.kelas, g.semester, g.tahun_ajaran;

-- ============================================
-- COMPLETION MESSAGE
-- ============================================

do $$
begin
  raise notice '============================================';
  raise notice 'DATABASE SCHEMA SETUP COMPLETE!';
  raise notice '============================================';
  raise notice 'Tables Created: 11';
  raise notice 'Indexes Created: 30+';
  raise notice 'Functions Created: 4';
  raise notice 'Triggers Created: 3';
  raise notice 'Views Created: 2';
  raise notice 'RLS Policies: Enabled';
  raise notice 'Realtime: Enabled';
  raise notice '============================================';
  raise notice 'Next Steps:';
  raise notice '1. Run generate-password-hashes.js';
  raise notice '2. Insert users data';
  raise notice '3. Configure Telegram bot';
  raise notice '4. Deploy to Vercel';
  raise notice '============================================';
end $$;

